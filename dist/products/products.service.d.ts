import { Model } from 'mongoose';
import { ProductDocument, ProductImage } from './schemas/product.schema';
import { CreateProductDto } from './dto/create-product.dto';
import { UpdateProductDto } from './dto/update-product.dto';
import { ProductFilterDto } from './dto/product-filter.dto';
import { VendorsService } from '../modules/vendors/vendors.service';
import { MinioService, MinioUploadResult } from '../modules/minio/minio.service';
export declare class ProductsService {
    private productModel;
    private vendorsService;
    private minioService;
    constructor(productModel: Model<ProductDocument>, vendorsService: VendorsService, minioService: MinioService);
    create(userId: string, createProductDto: CreateProductDto): Promise<ProductDocument>;
    findAll(filter?: ProductFilterDto): Promise<ProductDocument[]>;
    findOne(id: string): Promise<ProductDocument>;
    findByVendor(vendorId: string, filter?: ProductFilterDto): Promise<ProductDocument[]>;
    findByCurrentVendor(userId: string, filter?: ProductFilterDto): Promise<ProductDocument[]>;
    update(id: string, userId: string, updateProductDto: UpdateProductDto): Promise<ProductDocument>;
    remove(id: string, userId: string): Promise<void>;
    search(searchTerm: string, filter?: ProductFilterDto): Promise<ProductDocument[]>;
    getCategories(): Promise<string[]>;
    updateInventory(productId: string, quantity: number): Promise<void>;
    uploadImages(productId: string, userId: string, files: Array<Express.Multer.File>): Promise<ProductDocument>;
    addProductImages(productId: string, userId: string, uploadResults: MinioUploadResult[]): Promise<ProductDocument>;
    setPrimaryImage(productId: string, userId: string, imageHash: string): Promise<ProductDocument>;
    removeProductImage(productId: string, userId: string, imageHash: string): Promise<ProductDocument>;
    getProductImages(productId: string): Promise<ProductImage[]>;
    getFeatured(limit?: number): Promise<ProductDocument[]>;
    getTrending(limit?: number): Promise<ProductDocument[]>;
    getNewArrivals(limit?: number): Promise<ProductDocument[]>;
    getTopRated(limit?: number): Promise<ProductDocument[]>;
    getOnSale(limit?: number): Promise<ProductDocument[]>;
    getByCategory(category: string, filter?: ProductFilterDto): Promise<ProductDocument[]>;
    incrementViews(productId: string): Promise<void>;
    updateRating(productId: string, newRating: number, reviewCount: number): Promise<ProductDocument>;
    getRelatedProducts(productId: string, limit?: number): Promise<ProductDocument[]>;
    getProductStats(productId: string): Promise<any>;
    toggleFeatured(productId: string, userId: string): Promise<ProductDocument>;
    bulkUpdateStatus(productIds: string[], status: string, userId: string): Promise<{
        updated: number;
    }>;
    getVendorProductStats(userId: string): Promise<any>;
    getLowStockProducts(userId: string): Promise<ProductDocument[]>;
    duplicateProduct(productId: string, userId: string): Promise<ProductDocument>;
}
